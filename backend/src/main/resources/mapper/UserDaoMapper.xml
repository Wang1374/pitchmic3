<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.UserDao">
    <resultMap id="result" type="com.example.demo.entity.User">
        <id column="id" property="id"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="identity" column="identity"/>
        <result property="profilePicture" column="profile_picture"/>
        <result property="updateDate" column="update_date"/>
        <result property="createDate" column="create_date"/>
        <result property="removeIdentity" column="remove_identity"/>
        <result property="updateUser" column="update_user"/>
        <result property="createUser" column="create_user"/>
        <result property="teamId" column="team_id"/>
        <result property="status" column="status"/>
        <association property="filePath" column="profile_picture" select="com.example.demo.dao.FilePathDao.selectById"/>
        <collection property="roles" column="id" select="com.example.demo.dao.RoleDao.getRoleByUserId"/>
    </resultMap>
    <select id="login" parameterType="String" resultMap="result">
        select * from `user` where email = #{ accountNumber } or phone = #{accountNumber};
    </select>
    <select id="getUserInfos" parameterType="com.example.demo.entity.User" resultMap="result">
        select * from `user`
        <where>
            <if test="user.email != null">
                or email = #{user.email}
            </if>
            <if test="user.phone != null">
                or phone = #{user.phone}
            </if>
        </where>
    </select>

    <insert id="register" parameterType="com.example.demo.entity.User">
        insert into `user`(
        `name`,
        `password`,
        email,
        `phone`,
        identity,
        profile_picture,
        update_date,
        create_date,
        update_user,
        create_user,
        `status`
        )
        values(
        #{user.name},
        #{user.password},
        #{user.email},
        #{user.phone},
        #{user.identity},
        #{user.profilePicture},
        #{user.updateDate},
        #{user.createDate},
        #{user.updateUser},
        #{user.createUser},
        #{user.status}
        )
    </insert>

    <select id="getUserById" parameterType="integer" resultMap="result">
        select * from `user` where id = #{id};
    </select>
    <select id="getUserByTeamId" parameterType="integer" resultMap="result" >
        select * from `user` where team_id = #{id}
    </select>
    <select id="getUserList" resultMap="result" >
        select id,name,email from `user`
    </select>
    <select id="checkEmailAndPhone" resultType="com.example.demo.entity.User">
        select * from `user` where email = #{emailOrPhone} or phone = #{emailOrPhone}
    </select>
    <update id="updateUser" parameterType="com.example.demo.entity.User">
        update `user`
        <set>
            <if test="user.name != null and user.name != ''">name=#{user.name},</if>
            <if test="user.email != null and user.email != ''">email=#{user.email},</if>
            <if test="user.phone != null and user.phone != ''">phone=#{user.phone},</if>
            <if test="user.password != null and user.password != ''">password=#{user.password},</if>
            <if test="user.profilePicture != null">profile_picture=#{user.profilePicture}</if>
        </set>
        where id = #{user.id}
    </update>
    <select id="getNotCurrentUser" resultMap="result">
        select * from `user` where id &lt;&gt; #{id}
    </select>
    <delete id="removeUser">
        delete from `user` where id = #{id}
    </delete>
</mapper>
























